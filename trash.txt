(define make-dir2 (lambda (system-arg folder-name)
                   (make-system (get-system-name system-arg)
                                      (get-loged-user system-arg)
                                      (get-path system-arg)                            
                                      (cons (sys-insertar-folder-en-hijos
                                             system-arg
                                            (car(get-current-drive system-arg))
                                            folder-name)
                                            '())
                                      (get-users system-arg)
                                      (get-drives system-arg)
                                      (get-system-date system-arg)
                                      (get-trashcan system-arg))))

(define (sys-insertar-folder-en-hijos2 system-arg padre . nombres-folders)
  (define (actualizar-hijos padre folder-buscado nueva-folder)
    (make-folder (folder-name padre)
                 (get-create-date padre)
                 (get-mod-date padre)
                 (get-folder-location padre)
                 (get-folder-creator padre)
                 (get-folder-size padre)
                 (get-items padre)
                 (get-folder-security padre)
                 (get-folder-pass padre)
                 (map (lambda (hijo)
                        (if (equal? (folder-name hijo) folder-buscado)
                            nueva-folder
                            hijo))
                      (folder-content-hijos padre))))
  (if (null? nombres-folders)
      padre
      (let* ([folder-buscado (car nombres-folders)]
             [folder-encontrado (sys-buscar-folder-hijo padre folder-buscado)])
        (if folder-encontrado
            (actualizar-hijos padre folder-buscado
                             (apply sys-insertar-folder-en-hijos system-arg folder-encontrado (cdr nombres-folders)))
            (let ([nueva-folder (make-folder folder-buscado
                                  (crnt-date) ; create-date
                                  (crnt-date) ; mod-date
                                  (if (pair? (get-folder-location padre))
                                      (string-append (get-folder-location padre) "/" folder-buscado)
                                      "") ; location
                                  (get-loged-user system-arg) ; creator
                                  '() ; size
                                  '() ; items
                                  '() ; security
                                  "" ; password
                                  '())]) ; content-hijos

              (if (null? (cdr nombres-folders))
                  (sys-insertar-folder system-arg padre folder-buscado)
                  (sys-insertar-folder-en-hijos system-arg
                   (actualizar-hijos padre folder-buscado nueva-folder) (cdr nombres-folders))))))))

(define (sys-insertar-folder2 system-arg folder name)
  (cond
    [(null? folder) (make-folder name '() '() "" (get-loged-user system-arg) '() '() '() "" '())]
    [(sys-buscar-folder-hijo folder name) folder] ; No agregar hijo repetido
    [else (make-folder (folder-name folder)
                       (get-create-date folder)
                       (get-mod-date folder)
                       (get-folder-location folder)
                       (get-folder-creator folder)
                       (get-folder-size folder)
                       (get-items folder)
                       (get-folder-security folder)
                       (get-folder-pass folder)
                       (cons (make-folder name (crnt-date-folder) (crnt-date-folder) (if (pair? (get-folder-location folder)) (string-append (get-folder-location folder) "/" name) "") (get-loged-user system-arg) '() '() '() "" '()) (folder-content-hijos folder)))]))